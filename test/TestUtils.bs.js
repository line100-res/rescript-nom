// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Seq = require("@line100/rescript-seq/src/Seq.bs.js");
var List = require("rescript/lib/js/list.js");
var Test = require("rescript-test/src/Test.bs.js");
var Caml_obj = require("rescript/lib/js/caml_obj.js");
var Belt_Array = require("rescript/lib/js/belt_Array.js");

var identity = Caml_obj.caml_equal;

function intEqual(message, a, b) {
  return Test.assertion(message, "intEqual", identity, a, b);
}

function stringEqual(message, a, b) {
  return Test.assertion(message, "stringEqual", identity, a, b);
}

function listToSeq(lst) {
  if (!lst) {
    return /* Nil */0;
  }
  var rest = lst.tl;
  var a = lst.hd;
  if (rest) {
    return Seq.make((function (param) {
                  return listToSeq(rest);
                }), a);
  } else {
    return Seq.make(undefined, a);
  }
}

function seqEqual(message, seq, lst) {
  var len1 = List.length(lst);
  var mathcer = listToSeq(lst);
  var ret = Seq.match(undefined, seq, mathcer);
  var match = Seq.countForced(seq);
  Test.assertion(message, "seqEqual", identity, match[1], true);
  Test.assertion(message, "seqEqual", identity, match[0], len1);
  return Test.assertion(message, "seqEqual", identity, ret, len1);
}

function resultOkEqual(message, result, value, rest, index) {
  if (result.TAG === /* Pass */0) {
    Test.assertion(message, "resultEqual:Pass:Value", identity, result._1, value);
    Test.assertion(message, "resultEqual:Pass:Rest", Seq.equal, result._0, rest);
    return Test.assertion(message, "resultEqual:Pass:Value", identity, result._2, index);
  }
  console.log(result._0, result._1, result._2);
  return Test.fail(message, undefined);
}

function resultNoEqual(message, result, err, rest, index) {
  if (result.TAG === /* Pass */0) {
    return Test.fail(message, undefined);
  }
  Test.assertion(message, "resultEqual:Fail:Value", identity, result._1, err);
  Test.assertion(message, "resultEqual:Fail:Rest", Seq.equal, result._0, rest);
  return Test.assertion(message, "resultEqual:Fail:Value", identity, result._2, index);
}

function arrayEqual(message, a, b, comp) {
  return Test.assertion(message, "arrayEqual", (function (a, b) {
                return Belt_Array.eq(a, b, comp);
              }), a, b);
}

exports.identity = identity;
exports.intEqual = intEqual;
exports.stringEqual = stringEqual;
exports.listToSeq = listToSeq;
exports.seqEqual = seqEqual;
exports.resultOkEqual = resultOkEqual;
exports.resultNoEqual = resultNoEqual;
exports.arrayEqual = arrayEqual;
/* Test Not a pure module */
