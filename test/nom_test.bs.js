// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Nom = require("../src/Nom.bs.js");
var Seq = require("@line100/rescript-seq/src/Seq.bs.js");
var Test = require("rescript-test/src/Test.bs.js");
var Curry = require("rescript/lib/js/curry.js");
var TestUtils = require("./TestUtils.bs.js");

function createCharSeq(str) {
  var gen = function (index) {
    var c = str.charAt(index);
    if (c === "") {
      return /* Nil */0;
    } else {
      return Seq.make((function (param) {
                    return gen(index + 1 | 0);
                  }), c);
    }
  };
  return gen(0);
}

Test.test("nom satisfy", (function (param) {
        var pa = function (param, param$1) {
          return Nom.satisfy((function (v) {
                        return v === "a";
                      }), (function (param) {
                        return "not a";
                      }), param, param$1);
        };
        var pb = function (param, param$1) {
          return Nom.satisfy((function (v) {
                        return v === "b";
                      }), (function (param) {
                        return "not b";
                      }), param, param$1);
        };
        var seq0 = createCharSeq("abc");
        var seq1 = TestUtils.listToSeq({
              hd: "b",
              tl: /* [] */0
            });
        TestUtils.resultOkEqual("test pa", pa(seq0, 0), "a", createCharSeq("bc"), 1);
        return TestUtils.resultOkEqual("test pa", pb(seq1, 0), "b", createCharSeq(""), 1);
      }));

Test.test("nom return", (function (param) {
        var pa = function (param, param$1) {
          return Nom.satisfy((function (v) {
                        return v === "a";
                      }), (function (param) {
                        return "not a";
                      }), param, param$1);
        };
        var pe = function (param, param$1) {
          return Nom.bind(pa, (function (param) {
                        return function (param, param$1) {
                          return Nom.$$return(97, param, param$1);
                        };
                      }), param, param$1);
        };
        var seq0 = createCharSeq("abc");
        var seq1 = createCharSeq("b");
        TestUtils.resultOkEqual("test pe", pe(seq0, 0), 97, createCharSeq("bc"), 1);
        return TestUtils.resultNoEqual("test pe", pe(seq1, 0), "not a", createCharSeq("b"), 0);
      }));

function pNumber(param, param$1) {
  return Nom.satisfy((function (v) {
                if (typeof v === "number" || v.TAG !== /* Num */0) {
                  return false;
                } else {
                  return true;
                }
              }), (function (param) {
                return "not number";
              }), param, param$1);
}

function pLeft(param, param$1) {
  return Nom.satisfy((function (v) {
                return v === 2;
              }), (function (param) {
                return "not left";
              }), param, param$1);
}

function pRight(param, param$1) {
  return Nom.satisfy((function (v) {
                if (typeof v === "number") {
                  return v >= 3;
                } else {
                  return false;
                }
              }), (function (param) {
                return "not right";
              }), param, param$1);
}

function pAdd(param, param$1) {
  return Nom.satisfy((function (v) {
                return v === 0;
              }), (function (param) {
                return "not add";
              }), param, param$1);
}

Test.test("nom calculator", (function (param) {
        var p = Nom.tuple3(pNumber, pAdd, pNumber);
        TestUtils.resultOkEqual("test 1 + 2", Curry._2(p, TestUtils.listToSeq({
                      hd: {
                        TAG: /* Num */0,
                        _0: 1
                      },
                      tl: {
                        hd: /* Add */0,
                        tl: {
                          hd: {
                            TAG: /* Num */0,
                            _0: 2
                          },
                          tl: /* [] */0
                        }
                      }
                    }), 0), [
              {
                TAG: /* Num */0,
                _0: 1
              },
              /* Add */0,
              {
                TAG: /* Num */0,
                _0: 2
              }
            ], /* Nil */0, 3);
        var pNode = Curry._4(Nom.Sequence.delimited, pLeft, (function (param, param$1) {
                return Nom.mapValue(p, (function (param) {
                              return {
                                      TAG: /* Node */1,
                                      _0: {
                                        hd: param[0],
                                        tl: {
                                          hd: param[1],
                                          tl: {
                                            hd: param[2],
                                            tl: /* [] */0
                                          }
                                        }
                                      }
                                    };
                            }), param, param$1);
              }), pRight, (function (param) {
                return "not node: " + param[1] + ", index: " + String(param[2]);
              }));
        return TestUtils.resultOkEqual("test (1 + 2)", Curry._2(pNode, TestUtils.listToSeq({
                            hd: /* ParentheseLeft */2,
                            tl: {
                              hd: {
                                TAG: /* Num */0,
                                _0: 1
                              },
                              tl: {
                                hd: /* Add */0,
                                tl: {
                                  hd: {
                                    TAG: /* Num */0,
                                    _0: 2
                                  },
                                  tl: {
                                    hd: /* ParentheseRight */3,
                                    tl: /* [] */0
                                  }
                                }
                              }
                            }
                          }), 0), {
                    TAG: /* Node */1,
                    _0: {
                      hd: {
                        TAG: /* Num */0,
                        _0: 1
                      },
                      tl: {
                        hd: /* Add */0,
                        tl: {
                          hd: {
                            TAG: /* Num */0,
                            _0: 2
                          },
                          tl: /* [] */0
                        }
                      }
                    }
                  }, /* Nil */0, 5);
      }));

exports.createCharSeq = createCharSeq;
exports.pNumber = pNumber;
exports.pLeft = pLeft;
exports.pRight = pRight;
exports.pAdd = pAdd;
/*  Not a pure module */
